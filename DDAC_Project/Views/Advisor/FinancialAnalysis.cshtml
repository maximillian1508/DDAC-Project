@model DDAC_Project.Controllers.AdvisorController.FinancialAnalysisModel
@using Microsoft.AspNetCore.Identity
@using DDAC_Project.Areas.Identity.Data
@using DDAC_Project.Constants

@inject UserManager<DDAC_ProjectUser> UserManager

@{
    ViewData["Title"] = "Financial Analysis";
}


@if (User.IsInRole(UserRoles.Advisor))
{
    <h2 style="padding: 15px 0 0 0; color: dimgray">Financial Analysis of @Model.FullName</h2>
}
<div class="container" style="width:100%; margin-top: 15px">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @if (Model.CurrentDate > Model.AvailableMonths.Last())
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action((User.IsInRole(UserRoles.Advisor)?"FinancialAnalysis":"ClientFinancialAnalysis"), new { clientId = Model.ClientId, date = Model.CurrentDate.AddMonths(-1) })">&laquo; Previous</a>
                </li>
            }

                <li class="page-item">
                <a class="page-link" href="@Url.Action((User.IsInRole(UserRoles.Advisor)?"FinancialAnalysis":"ClientFinancialAnalysis"), new { clientId = Model.ClientId, date = Model.CurrentDate.Month })">
                        @Model.CurrentDate.ToString("MMMM yyyy")
                    </a>
                </li>
            

            @if (Model.CurrentDate < DateTime.Now.Date)
            {
                <li class="page-item">
                <a class="page-link" href="@Url.Action((User.IsInRole(UserRoles.Advisor)?"FinancialAnalysis":"ClientFinancialAnalysis"), new { clientId = Model.ClientId, date = Model.CurrentDate.AddMonths(1) })">Next &raquo;</a>
                </li>
            }
        </ul>
    </nav>
    <div class="row" style="width:100%; margin: 0 auto 0 auto; justify-content: space-between">
        <div class="col-8">
            <div class="row" style="justify-content: space-between;">
                <div class="col me-2" style="width: 30%; height: 20vh; border:solid 1px lightgrey; border-radius:10px;padding: 1em">
                    <h4 style="font-size: 1.25rem; color: slategrey; margin-bottom: 0">Total Income</h4>
                    <p style="font-weight: 500;word-wrap: break-word; font-size: 1.75rem; padding: 0; margin: 0; line-height: normal">RM @Model.TotalIncome.ToString("N2")</p>
                </div>
                <div class="col me-2" style="width: 30%; height: 20vh; border:solid 1px lightgrey; border-radius:10px;padding: 1em">
                    <h4 style="font-size: 1.25rem; color: slategrey; margin-bottom: 0">Total Expense</h4>
                    <p style="font-weight: 500; word-wrap: break-word; font-size: 1.75rem; padding: 0; margin: 0; line-height: normal">RM @Math.Abs(Model.TotalExpense).ToString("N2")</p>
                </div>
                <div class="col" style="width: 30%; height: 20vh; border:solid 1px lightgrey; border-radius:10px;padding: 1em">
                    <h4 style="font-size: 1.25rem; color: slategrey; margin-bottom: 0">Net Balance</h4>
                    <p style="font-weight: 500; word-wrap: break-word; font-size: 1.75rem; padding: 0; margin: 0; line-height: normal">RM @Model.NetBalance.ToString("N2")</p>
                </div>
            </div>
            <div class="row" style="margin-top: 1.5em">
                <div class="col-6" style="border: solid 1px lightgrey; height: 50vh; border-radius: 10px">
                    <canvas id="incomePieChart"></canvas>

                    <script>
                        var incomeCtx = document.getElementById('incomePieChart').getContext('2d');
                        var incomePieChart = new Chart(incomeCtx, {
                            type: 'pie',
                            data: {
                                labels: @Html.Raw(Json.Serialize(Model.CategoryIncomeData.Select(c => c.CategoryName))),
                                datasets: [{
                                    data: @Html.Raw(Json.Serialize(Model.CategoryIncomeData.Select(c => c.TotalIncome))),
                                    backgroundColor: [
                                        'rgba(54, 162, 235, 0.2)',
                                        'rgba(255, 99, 132, 0.2)',
                                        'rgba(255, 206, 86, 0.2)',
                                        'rgba(75, 192, 192, 0.2)',
                                        'rgba(153, 102, 255, 0.2)',
                                        'rgba(255, 159, 64, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 99, 132, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1,
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'top',
                                    },
                                    title: {
                                        display: true,
                                        text: 'Income Details by Category'
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function (context) {
                                                let label = context.label || '';
                                                if (label) {
                                                    label += ': ';
                                                }
                                                if (context.raw !== null) {
                                                    label += 'RM ' + context.raw.toFixed(2);
                                                }
                                                return label;
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    </script>
                </div>
                <div class="col-6" style="border: solid 1px lightgrey; border-left: none; border-radius:10px; height: 50vh">
                    <canvas id="expensePieChart"></canvas>

                    <script>
                        var expenseCtx = document.getElementById('expensePieChart').getContext('2d');
                        var expensePieChart = new Chart(expenseCtx, {
                            type: 'pie',
                            data: {
                                labels: @Html.Raw(Json.Serialize(Model.CategoryExpenseData.Select(c => c.CategoryName))),
                                datasets: [{
                                    data: @Html.Raw(Json.Serialize(Model.CategoryExpenseData.Select(c => c.TotalExpense))),
                                    backgroundColor: [
                                        'rgba(255, 215, 0, 0.2)',
                                        'rgba(0, 128, 0, 0.2)',
                                        'rgba(255, 165, 0, 0.2)',
                                        'rgba(70, 130, 180, 0.2)',
                                        'rgba(218, 112, 214, 0.2)',
                                        'rgba(255, 99, 71, 0.2)'
                                    ],
                                    borderColor: [
                                        'rgba(255, 99, 132, 1)',
                                        'rgba(54, 162, 235, 1)',
                                        'rgba(255, 206, 86, 1)',
                                        'rgba(75, 192, 192, 1)',
                                        'rgba(153, 102, 255, 1)',
                                        'rgba(255, 159, 64, 1)'
                                    ],
                                    borderWidth: 1
                                }]
                            },
                            options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                plugins: {
                                    legend: {
                                        position: 'top',
                                    },
                                    title: {
                                        display: true,
                                        text: 'Expense Details by Category'
                                    },
                                    tooltip: {
                                        callbacks: {
                                            label: function (context) {
                                                let label = context.label || '';
                                                if (label) {
                                                    label += ': ';
                                                }
                                                if (context.raw !== null) {
                                                    label += 'RM ' + context.raw.toFixed(2);
                                                }
                                                return label;
                                            }
                                        }
                                    }
                                }
                            }
                        });
                    </script>
                </div>
            </div>
        </div>
        <div class="col-4" style="border:solid 1px lightgrey;border-radius:10px; width: 30%; margin-left:1em; height:74.5vh">
            <h3 class="mt-2" style="text-align: center">Comments</h3>
            <div id="comment-container" class="comment-container" style="overflow-y: auto; height: @(User.IsInRole(UserRoles.Client) ? "85%" : "75%"); margin-bottom: 0.5em">
                @foreach (var comment in Model.CommentHistory)
                {
                    <div class="comment" style="margin-bottom: 1em;">
                        @if (User.IsInRole(UserRoles.Client))
                        {
                            <p style="font-weight: 500; margin: 0">@(!String.IsNullOrEmpty(comment.AdvisorName) ? comment.AdvisorName : "Advisor")</p>
                        }
                        <div style="display: flex; justify-content: space-between">
                            <p class="comment-text" style="max-width: 70%; word-wrap: break-word; margin: 0;">@comment.CommentText</p>
                            <p class="comment-date" style="text-align: right; font-size: 0.9em; color: #777; margin: 0">@comment.Date.ToString("MMM dd, yyyy HH:mm")</p>
                        </div>
                    </div>
                }
            </div>

            @if (User.IsInRole(UserRoles.Advisor) && Model.CurrentDate.Month >= DateTime.Now.Month )
            {
                <form id="comment-form" style="bottom: 0; width: 90%; margin: auto auto 1em auto">
                    <input type="hidden" name="clientId" value="@Model.ClientId" />
                    <div class="input-group">
                        <input type="text" class="form-control" name="commentText" id="commentText" placeholder="Add a comment" aria-label="Add a comment" required>
                        <button class="btn btn-outline-secondary" type="submit">Submit</button>
                    </div>
                </form>
            }
        </div>
        @section Scripts {
            <script>
                $(document).ready(function () {
                    $('#comment-form').on('submit', function (e) {
                        e.preventDefault();
                        var formData = $(this).serialize();
                        $.ajax({
                            url: '@Url.Action("AddComment", "Advisor")',
                            type: 'POST',
                            data: formData,
                            success: function (result) {
                                if (result.success) {
                                    var newComment = '<div class="comment" style="margin-bottom: 1em;">' +
                                        '<div style="display: flex; justify-content: space-between">' +
                                        '<p class="comment-text" style="max-width: 70%; word-wrap: break-word; margin: 0;">' + result.commentText + '</p>' +
                                        '<p class="comment-date" style="text-align: right; font-size: 0.9em; color: #777; margin: 0">' + result.date + '</p>' +
                                        '</div></div>';
                                    $('#comment-container').prepend(newComment);
                                    $('#commentText').val('');
                                } else {
                                    alert('Error adding comment: ' + result.message);
                                }
                            },
                            error: function (error) {
                                console.log('Error:', error);
                                alert('An error occurred while adding the comment.');
                            }
                        });
                    });
                });
            </script>
        }
        <div class="row" style="width: 100%; height: 50vh; border: solid 1px lightgrey; border-radius: 10px; margin: 2em auto; text-align: center">
            <div style="overflow-y: auto; height: 100%; position:relative">
                <h3 class="mt-2">Transaction History</h3>
                <table class="table table-hover">
                    <thead style="position: sticky; top:0">
                        <tr>
                            <th scope="col">#</th>
                            <th>Date</th>
                            <th>Description</th>
                            <th>Amount</th>
                            <th>Type</th>
                            <th>Category</th>
                            <th>Goal</th>
                            @if (User.IsInRole(UserRoles.Client) && Model.CurrentDate.Month >= DateTime.Now.Month)
                            {
                                <th></th>
                                <th></th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.TransactionHistory)
                        {
                            <tr>
                                <th scope="row">@(Model.TransactionHistory.IndexOf(transaction) + 1)</th>
                                <td>@transaction.Date.ToShortDateString()</td>
                                <td>@(transaction.Description ?? "-")</td>
                                @if (transaction.Type == "Income")
                                {
                                    <td class="text-success">
                                        RM @transaction.Amount.ToString("N2")
                                    </td>
                                }
                                else if (transaction.Type == "Expense")
                                {
                                    <td class="text-danger">
                                        -RM @transaction.Amount.ToString("N2")
                                    </td>
                                }
                                else
                                {
                                    <td class="text-dark">
                                        RM @transaction.Amount.ToString("N2")
                                    </td>
                                }
                                <td>@transaction.Type</td>
                                <td>@transaction.CategoryName</td>
                                <td>@(transaction.GoalName ?? "-")</td>
                                @if (User.IsInRole(UserRoles.Client) && Model.CurrentDate.Month >= DateTime.Now.Month)
                                {

                                    <td style="text-align: center; vertical-align:middle">
                                        @if (transaction.Type == "Income")
                                        {
                                            <a asp-action="EditIncome" asp-controller="Client" asp-route-TransactionId="@transaction.TransactionId"><i class="fa-solid fa-pen-to-square"></i></a>
                                        }
                                        else if (transaction.Type == "Expense")
                                        {
                                            <a asp-action="EditExpense" asp-controller="Client" asp-route-TransactionId="@transaction.TransactionId"><i class="fa-solid fa-pen-to-square"></i></a>
                                        }
                                        else if (!String.IsNullOrEmpty(transaction.GoalName))
                                        {
                                            <a asp-action="EditIncome" asp-controller="Client" asp-route-TransactionId="@transaction.TransactionId"><i class="fa-solid fa-pen-to-square"></i></a>
                                        }
                                    </td>
                                    <td style="text-align: center; vertical-align:middle">
                                        <a asp-action="DeleteTransaction" asp-controller="Client" asp-route-TransactionId="@transaction.TransactionId" style="color: red"><i class="fa-solid fa-trash-can"></i></a>
                                    </td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

        </div>
    </div>
</div>